import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üåê –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –≥–µ–æ–ø–æ–∑–∏—Ü–∏–π", 
    layout="centered",
    menu_items={
        'About': "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"
    }
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_ENDPOINT = "https://prac10-i54v.onrender.com"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
COORDINATE_SYSTEMS = {
    "–°–ö-42": "–°–ö-42",
    "–°–ö-95": "–°–ö-95", 
    "–ü–ó-90": "–ü–ó-90",
    "–ü–ó-90.02": "–ü–ó-90.02",
    "–ü–ó-90.11": "–ü–ó-90.11",
    "WGS-84": "WGS-84 (G1150)",
    "ITRF-2008": "ITRF-2008",
    "–ì–°–ö-2011": "–ì–°–ö-2011"
}

def verify_api_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(API_ENDPOINT, timeout=5)
        return response.ok
    except requests.exceptions.RequestException:
        return False

def process_coordinate_conversion(file_obj, src_system, dst_system):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    api_url = urljoin(API_ENDPOINT, "/convert-coordinates/")
    file_data = {"file": (file_obj.name, file_obj.getvalue(), file_obj.type)}
    params = {"source_system": src_system, "target_system": dst_system}
    
    try:
        api_response = requests.post(api_url, files=file_data, data=params)
        if api_response.status_code == 200:
            return BytesIO(api_response.content)
        st.warning(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {api_response.text}")
    except Exception as api_error:
        st.error(f"–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: {api_error}")
    return None

def create_markdown_document(file_obj, src_system, dst_system):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    report_url = urljoin(API_ENDPOINT, "/generate-report/")
    file_data = {"file": (file_obj.name, file_obj.getvalue(), file_obj.type)}
    params = {"source_system": src_system, "target_system": dst_system}
    
    try:
        response = requests.post(report_url, files=file_data, data=params)
        if response.status_code == 200:
            return BytesIO(response.content)
        st.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {response.text}")
    except Exception as report_error:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {report_error}")
    return None

def display_file_preview(uploaded_file):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        if uploaded_file.name.endswith('.csv'):
            data = pd.read_csv(uploaded_file)
        else:
            data = pd.read_excel(uploaded_file)
        
        required_fields = ["Name", "X", "Y", "Z"]
        if not all(field in data.columns for field in required_fields):
            st.error(f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_fields)}")
            return False
            
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(data.head(3))
        return True
        
    except Exception as parse_error:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {parse_error}")
        return False

def main_interface():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.header("üåç –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    if not verify_api_connection():
        st.warning("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    input_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏", 
        type=['csv', 'xlsx'],
        accept_multiple_files=False
    )
    
    if not input_file:
        return
        
    if not display_file_preview(input_file):
        return
        
    # –í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    col_left, col_right = st.columns(2)
    with col_left:
        source_crs = st.selectbox(
            "–ò—Å—Ö–æ–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
            options=list(COORDINATE_SYSTEMS.keys())
        )
    with col_right:
        target_crs = st.selectbox(
            "–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
            options=list(COORDINATE_SYSTEMS.keys())
        )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if st.button("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        with st.spinner("–ò–¥—ë—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ..."):
            result = process_coordinate_conversion(input_file, source_crs, target_crs)
            if result:
                st.success("–ì–æ—Ç–æ–≤–æ!")
                st.download_button(
                    "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=result,
                    file_name="converted_coords.csv",
                    mime="text/csv"
                )
    
    if st.button("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç"):
        with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
            report = create_markdown_document(input_file, source_crs, target_crs)
            if report:
                st.success("–û—Ç—á—ë—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω!")
                st.download_button(
                    "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç",
                    data=report,
                    file_name="coordinate_report.md",
                    mime="text/markdown"
                )

if __name__ == "__main__":
    main_interface()