import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from urllib.parse import urljoin

st.set_page_config(page_title="üõ∞Ô∏è –°–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", layout="centered")

API_ENDPOINT = "https://prac10-i54v.onrender.com"

SYSTEM_OPTIONS = [
    "–°–ö-95", "–ü–ó-90.11", "WGS-84 (G1150)",
    "–°–ö-42", "ITRF-2008", "–ü–ó-90", 
    "–ì–°–ö-2011", "–ü–ó-90.02"
]

def api_available():
    try:
        return requests.head(API_ENDPOINT, timeout=7).status_code == 200
    except:
        return False

def process_coordinates(data_file, from_system, to_system):
    service_url = urljoin(API_ENDPOINT, "/transform/")
    upload = {"data_file": (data_file.name, data_file.getvalue(), data_file.type)}
    params = {"from": from_system, "to": to_system}
    
    try:
        result = requests.post(service_url, files=upload, data=params)
        return BytesIO(result.content) if result.ok else None
    except:
        st.error("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None

def create_md_report(data_file, from_system, to_system):
    report_url = urljoin(API_ENDPOINT, "/analysis/")
    upload = {"data_file": (data_file.name, data_file.getvalue(), data_file.type)}
    params = {"from": from_system, "to": to_system}
    
    try:
        response = requests.post(report_url, files=upload, data=params)
        return BytesIO(response.content) if response.ok else None
    except:
        st.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞")
        return None

def app_interface():
    st.header("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # if not api_available():
    #     st.warning("–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    #     return

    data_input = st.file_uploader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", ["csv", "xls", "xlsx"])
    
    if data_input:
        try:
            df = pd.read_csv(data_input) if data_input.type == "text/csv" else pd.read_excel(data_input)
            
            if {"X", "Y", "Z", "Name"}.issubset(df.columns):
                st.subheader("–ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏")
                st.write(df.sample(min(3, len(df))))
                
                data_input.seek(0)
                
                left, right = st.columns(2)
                with left:
                    src = st.selectbox("–ò—Å—Ö–æ–¥–Ω–∞—è –°–ö", SYSTEM_OPTIONS, index=3)
                with right:
                    dst = st.selectbox("–¶–µ–ª–µ–≤–∞—è –°–ö", SYSTEM_OPTIONS, index=5)
                
                if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"):
                    with st.status("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                        output = process_coordinates(data_input, src, dst)
                        if output:
                            st.download_button(
                                "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                                output,
                                "converted_data.csv",
                                "text/csv"
                            )
                
                if st.button("–°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"):
                    with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞..."):
                        md_report = create_md_report(data_input, src, dst)
                        if md_report:
                            st.download_button(
                                "–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
                                md_report,
                                "coord_report.md",
                                "text/markdown"
                            )
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: —Ç—Ä–µ–±—É—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏ Name, X, Y, Z")
        
        except Exception as error:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(error)}")

if __name__ == "__main__":
    app_interface()