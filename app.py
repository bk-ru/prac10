# # app.py
# import streamlit as st
# import pandas as pd
# import requests
# import io
# from urllib.parse import urljoin

# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# st.set_page_config(
#     page_title="Excel Analyzer",
#     page_icon="üìä",
#     layout="wide",
#     initial_sidebar_state="expanded",
# )

# # URL –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ render.com
# # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π URL –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ render.com
# BACKEND_URL = "https://prac10.onrender.com"

# # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º
# def check_api_status():
#     """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
#     try:
#         response = requests.get(BACKEND_URL, timeout=10)
#         return response.status_code == 200
#     except requests.RequestException:
#         return False

# def process_excel(file):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ API –∏ –ø–æ–ª—É—á–∞–µ–º Markdown-–æ—Ç—á–µ—Ç"""
#     url = urljoin(BACKEND_URL, "/process-excel/")
#     files = {"file": file}
#     try:
#         response = requests.post(url, files=files)
#         if response.status_code == 200:
#             return response.content.decode('utf-8')
#         else:
#             st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {response.text}")
#             return None
#     except requests.RequestException as e:
#         st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}")
#         return None

# # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# def main():
#     st.title("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Excel —Ñ–∞–π–ª–æ–≤")
#     st.markdown("""
#     –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel-—Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
#     –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å".
#     """)

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
#     if not check_api_status():
#         st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return

#     # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
#     uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xlsx', 'xls'])

#     if uploaded_file is not None:
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
#         try:
#             df = pd.read_excel(uploaded_file)
#             st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
#             st.dataframe(df.head(5))

#             # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
#             st.subheader("–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
#             col1, col2, col3 = st.columns(3)
#             col1.metric("–°—Ç—Ä–æ–∫–∏", df.shape[0])
#             col2.metric("–°—Ç–æ–ª–±—Ü—ã", df.shape[1])
#             col3.metric("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", df.isna().sum().sum())

#             # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
#             uploaded_file.seek(0)

#             if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
#                 with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
#                     markdown_report = process_excel(uploaded_file)

#                 if markdown_report:
#                     st.success("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

#                     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
#                     st.subheader("–û—Ç—á–µ—Ç")
#                     st.markdown(markdown_report)

#                     # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
#                     st.download_button(
#                         label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
#                         data=markdown_report,
#                         file_name="report.md",
#                         mime="text/markdown",
#                     )

#         except Exception as e:
#             st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

# if __name__ == "__main__":
#     main()

# app.py
import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from urllib.parse import urljoin

st.set_page_config(page_title="üåç –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", layout="wide")

BACKEND_URL = "https://prac10.onrender.com"

COORD_SYSTEMS = [
    "–°–ö-42", "–°–ö-95", "–ü–ó-90", "–ü–ó-90.02", "–ü–ó-90.11",
    "WGS-84 (G1150)", "ITRF-2008", "–ì–°–ö-2011"
]

def check_api_status():
    try:
        response = requests.get(BACKEND_URL, timeout=10)
        return response.status_code == 200
    except requests.RequestException:
        return False

def convert_coordinates(file, source_system, target_system):
    url = urljoin(BACKEND_URL, "/convert-coordinates/")
    files = {"file": (file.name, file.getvalue(), file.type)}
    data = {"source_system": source_system, "target_system": target_system}
    try:
        response = requests.post(url, files=files, data=data)
        if response.status_code == 200:
            return BytesIO(response.content)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API: {str(e)}")
        return None

def generate_markdown_report(file, source_system, target_system):
    url = urljoin(BACKEND_URL, "/generate-report/")
    files = {"file": (file.name, file.getvalue(), file.type)}
    data = {"source_system": source_system, "target_system": target_system}
    try:
        response = requests.post(url, files=files, data=data)
        if response.status_code == 200:
            return BytesIO(response.content)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API: {str(e)}")
        return None

def main():
    st.title("üåç –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏.")

    # if not check_api_status():
    #     st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.")
    #     return

    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª", type=['csv', 'xlsx', 'xls'])

    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)

            required_columns = ["Name", "X", "Y", "Z"]
            if not all(col in df.columns for col in required_columns):
                st.error(f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
                return

            st.subheader("üì• –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df.head())

            uploaded_file.seek(0)

            col1, col2 = st.columns(2)
            with col1:
                source_system = st.selectbox("–ò—Å—Ö–æ–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", options=COORD_SYSTEMS)
            with col2:
                target_system = st.selectbox("–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", options=COORD_SYSTEMS)

            if st.button("üöÄ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"):
                with st.spinner("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ..."):
                    converted_data = convert_coordinates(uploaded_file, source_system, target_system)
                if converted_data:
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                        data=converted_data,
                        file_name="converted.csv",
                        mime="text/csv"
                    )

            if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Markdown-–æ—Ç—á–µ—Ç"):
                with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞..."):
                    report_data = generate_markdown_report(uploaded_file, source_system, target_system)
                if report_data:
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Markdown-–æ—Ç—á–µ—Ç",
                        data=report_data,
                        file_name="report.md",
                        mime="text/markdown"
                    )

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()