import streamlit as st
import pandas as pd
import requests
from io import BytesIO
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
st.set_page_config(
    page_title="üì° –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", 
    layout="wide",
    page_icon="üåê"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS
st.markdown("""
<style>
    .header-style { color: #2E86C1; font-family: 'Arial'; }
    .stButton>button { background: #1ABC9C; color: white; border-radius: 8px; }
    .stSelectbox>div>div>div { border: 2px solid #3498DB; }
    .stFileUploader>section>div { border: 2px dashed #28B463; }
    .report-output { background: #F9E79F; padding: 15px; border-radius: 10px; }
</style>
""", unsafe_allow_html=True)

API_SERVICE = "https://prac10-i54v.onrender.com"

COORDINATE_SYSTEMS = {
    "–°–ö-42": "russian42",
    "–ü–ó-90.11": "pz9011",
    "WGS84_G1150": "wgs84",
    "–ì–°–ö-2011": "gsk2011",
    "ITRF-2008": "itrf08",
    "–°–ö-95": "russian95",
    "–ü–ó-90": "pz90",
    "–ü–ó-90.02": "pz9002"
}

def display_guide():
    with st.expander("üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV/XLSX
        2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        4. –ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        5. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:**
        - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: Name, X, Y, Z
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .csv, .xlsx
        """)

def transform_data(file, source_system, target_system):
    url = urljoin(API_SERVICE, "/convert-coordinates/")
    files = {"file": (file.name, file.getvalue(), file.type)}
    data = {"source_system": source_system, "target_system": target_system}
    try:
        response = requests.post(url, files=files, data=data)
        if response.status_code == 200:
            return BytesIO(response.content)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API: {str(e)}")
        return None

def generate_markdown_report(file, source_system, target_system):
    url = urljoin(API_SERVICE, "/generate-report/")
    files = {"file": (file.name, file.getvalue(), file.type)}
    data = {"source_system": source_system, "target_system": target_system}
    try:
        response = requests.post(url, files=files, data=data)
        if response.status_code == 200:
            return BytesIO(response.content)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API: {str(e)}")
        return None

def main_interface():
    st.markdown("<h1 class='header-style'>üì° –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –≥–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h1>", unsafe_allow_html=True)
    
    display_guide()
    
    with st.container(border=True):
        uploaded_file = st.file_uploader(
            "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏", 
            type=["csv", "xlsx"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è CSV –∏ Excel —Ñ–∞–π–ª—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"
        )

    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file) if uploaded_file.type == "text/csv" else pd.read_excel(uploaded_file)
            
            if not {"Name", "X", "Y", "Z"}.issubset(df.columns):
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞!")
                return

            with st.container():
                col1, col2 = st.columns([2, 3])
                with col1:
                    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
                    src_sys = st.selectbox(
                        "–ò—Å—Ö–æ–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", 
                        options=list(COORDINATE_SYSTEMS.keys()),
                        index=3
                    )
                    tgt_sys = st.selectbox(
                        "–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", 
                        options=list(COORDINATE_SYSTEMS.keys()),
                        index=5
                    )
                    
                    c1, c2 = st.columns(2)
                    with c1:
                        if st.button("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
                            with st.spinner("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç..."):
                                result = transform_data(uploaded_file, src_sys, tgt_sys)
                                if result:
                                    st.session_state.converted_data = result
                    with c2:
                        if st.button("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", type="secondary", use_container_width=True):
                            with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞..."):
                                report_data = generate_markdown_report(uploaded_file, src_sys, tgt_sys)
                            if report_data:
                                st.download_button(
                                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Markdown-–æ—Ç—á–µ—Ç",
                                    data=report_data,
                                    file_name="report.md",
                                    mime="text/markdown"
                                )

                with col2:
                    st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                    st.dataframe(
                        df.head(5).style.highlight_max(color="#F8C471").format(precision=3),
                        use_container_width=True
                    )

            if "converted_data" in st.session_state:
                st.divider()
                st.success("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=st.session_state.converted_data,
                    file_name="transformed_coordinates.csv",
                    mime="text/csv",
                    type="primary"
                )

        except Exception as e:
            st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main_interface()